{"version":3,"sources":["assets\\framework\\plugin_boosts\\misc\\SpriteFrameCache.ts"],"names":[],"mappings":";;;;;AAAA;IAAA;QAaY,WAAM,GAAmC,EAAE,CAAC;IAkExD,CAAC;IA3EG,sBAAW,4BAAQ;aAAnB;YAEI,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,EACzB;gBACI,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAgB,EAAE,CAAC;aAC3C;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAGK,yCAAc,GAApB,UAAqB,GAAU;uCAAE,OAAO;;;;gBAEhC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAC5B,IAAG,KAAK,IAAI,IAAI,EAChB;oBACI,sBAAO,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAC,MAAM;4BAC9C,yDAAyD;4BACzD,IAAG,CAAC,GAAG,IAAG,GAAG,IAAI,EAAE,EAAE;gCACjB,MAAM,CAAC,WAAW,CAAC,CAAA;gCACnB,OAAO;6BACV;4BACD,IAAK,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAC9B;gCACI,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAC,EAAE,CAAC,WAAW,EAAC,UAAC,KAAK,EAAC,KAAK;oCAC7C,IAAG,KAAK,EAAC;wCAAC,MAAM,EAAE,CAAC;wCAAA,OAAM;qCAAC;oCAC1B,IAAG,KAAK,EACR;wCACI,KAAI,CAAC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;wCAC/B,OAAO,CAAC,KAAK,CAAC,CAAA;qCACjB;yCAAI;wCACD,MAAM,EAAE,CAAA;qCACX;gCACL,CAAC,CAAC,CAAA;6BACL;iCAAI;gCACD,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC,EAAE,UAAC,KAAK,EAAE,OAAO;oCACnD,IAAG,KAAK,EAAC;wCAAC,MAAM,EAAE,CAAC;wCAAA,OAAM;qCAAC;oCAC1B,IAAG,OAAO,EACV;wCACI,KAAK,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;wCACpC,KAAI,CAAC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;wCAC/B,OAAO,CAAC,KAAK,CAAC,CAAA;qCACjB;yCAAI;wCACD,MAAM,EAAE,CAAA;qCACX;gCACL,CAAC,CAAC,CAAC;6BACN;wBACL,CAAC,CAAC,EAAA;iBACL;gBACD,sBAAO,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAC,MAAM,IAAG,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,EAAC;;;KAExE;IAED,yCAAc,GAAd,UAAe,GAAW,EAAE,KAAU;QAClC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACzB,OAAO,KAAK,CAAC;IACjB,CAAC;IAGD,gCAAK,GAAL;QAEI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EACzB;YACI,IAAI,KAAK,GAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAC3B,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACxB;IACL,CAAC;IAED,iCAAM,GAAN,UAAO,CAAC;QAEJ,IAAI,KAAK,GAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QAC3B,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACzB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;IACzB,CAAC;IAEL,uBAAC;AAAD,CA/EA,AA+EC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class SpriteFrameCache\n{\n    static _instance:SpriteFrameCache;\n\n    static get instance()\n    {\n        if(this._instance == null)\n        {\n            this._instance = new SpriteFrameCache();\n        }\n        return this._instance;\n    }\n\n    private frames:{[index:string]:cc.SpriteFrame} = {};\n    async getSpriteFrame(url:string):Promise<cc.SpriteFrame>\n    {\n        let frame = this.frames[url]\n        if(frame == null)\n        {\n            return new Promise<cc.SpriteFrame>((resolve,reject)=>{\n                // console.log(\"[SpriteFrameCache] request image:\" + url)\n                if(!url ||url == \"\") {\n                    reject(\"empty-url\")\n                    return;\n                }\n                if ( url.indexOf(\"http\") == -1)\n                {\n                    cc.loader.loadRes(url,cc.SpriteFrame,(error,frame)=>{\n                        if(error){reject();return}\n                        if(frame)\n                        {\n                            this.addSpriteFrame(url ,frame)\n                            resolve(frame)\n                        }else{\n                            reject()\n                        }\n                    })\n                }else{\n                    cc.loader.load({url: url, type: 'png'}, (error, texture) =>{\n                        if(error){reject();return}\n                        if(texture)\n                        {\n                            frame = new cc.SpriteFrame(texture);\n                            this.addSpriteFrame(url ,frame)\n                            resolve(frame)\n                        }else{\n                            reject()\n                        }\n                    });\n                }\n            })\n        }\n        return new Promise<cc.SpriteFrame>((resolve,reject)=>resolve(frame));\n        \n    }\n\n    addSpriteFrame(url: string, frame: any): any {\n        this.frames[url] = frame;\n        return frame;\n    }\n\n\n    clear()\n    {\n        for (var k in this.frames)\n        {\n            let frame =  this.frames[k]\n            cc.loader.release(frame);\n            delete this.frames[k]\n        }\n    }\n\n    remove(k)\n    {\n        let frame =  this.frames[k]\n        cc.loader.release(frame);\n        delete this.frames[k]\n    }\n\n}"]}