{"version":3,"sources":["assets\\framework\\plugin_boosts\\utils\\Intersection.ts"],"names":[],"mappings":";;;;;AAAA;IAAA;IAyBA,CAAC;IAvBG,wBAAwB;IACjB,gCAAmB,GAA1B,UAA2B,SAAiB,EAAE,MAAM,EAAE,IAAI;QACtD,IAAI,EAAE,GAAG,CAAC,CAAA;QACV,IAAI,EAAE,GAAG,CAAC,CAAA;QACV,yEAAyE;QACzE,IAAI,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACpB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;aACV,IAAI,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK;YACtC,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAA;;YAExB,EAAE,GAAG,SAAS,CAAC,CAAC,CAAA;QACpB,IAAI,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACpB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;aACV,IAAI,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM;YACvC,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAA;;YAEzB,EAAE,GAAG,SAAS,CAAC,CAAC,CAAA;QACpB,IAAI,EAAE,GAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,CAAC,CAAA;QACpB,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QACrB,IAAI,EAAE,CAAC,MAAM,EAAE,GAAG,MAAM,GAAG,MAAM;YAC7B,OAAO,IAAI,CAAA;QACf,OAAO,KAAK,CAAA;IAChB,CAAC;IACL,mBAAC;AAAD,CAzBA,AAyBC,IAAA;;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiMG","file":"","sourceRoot":"/","sourcesContent":["export default class Intersection\n{\n    // contains and intesect\n    static circleIntersectRect(circle_pt:cc.Vec2, radius, rect){\n        let cx = 0\n        let cy = 0\n        //Find the point on the collision box closest to the center of the circle\n        if (circle_pt.x < rect.x)\n            cx = rect.x\n        else if (circle_pt.x > rect.x + rect.width)\n            cx = rect.x + rect.width\n        else\n            cx = circle_pt.x\n        if (circle_pt.y < rect.y )\n            cy = rect.y\n        else if( circle_pt.y > rect.y + rect.height)\n            cy = rect.y + rect.height\n        else\n            cy = circle_pt.y\n        let v2 =cc.v2(cx,cy) \n        v2.subSelf(circle_pt)    \n        if (v2.magSqr() < radius * radius)\n            return true\n        return false\n    }\n}\n/***\n// 矩形和圆形碰撞检测\nbool IsCirlceCollisionRect(float circleXPos, float circleYPos, float radius, float rectX, float rectY, float rectW, float rectH)\n{\n    float arcR  = radius;\n    float arcOx = circleXPos;\n    float arcOy = circleYPos;\n\n    //分别判断矩形4个顶点与圆心的距离是否<=圆半径；如果<=，说明碰撞成功   \n    if(((rectX-arcOx) * (rectX-arcOx) + (rectY-arcOy) * (rectY-arcOy)) <= arcR * arcR)   \n        return true;   \n    if(((rectX+rectW-arcOx) * (rectX+rectW-arcOx) + (rectY-arcOy) * (rectY-arcOy)) <= arcR * arcR)   \n        return true;   \n    if(((rectX-arcOx) * (rectX-arcOx) + (rectY+rectH-arcOy) * (rectY+rectH-arcOy)) <= arcR * arcR)   \n        return true;   \n    if(((rectX+rectW-arcOx) * (rectX+rectW-arcOx) + (rectY+rectH-arcOy) * (rectY+rectH-arcOy)) <= arcR * arcR)   \n        return true;\n\n    //判断当圆心的Y坐标进入矩形内时X的位置，如果X在(rectX-arcR)到(rectX+rectW+arcR)这个范围内，则碰撞成功   \n    float minDisX = 0;   \n    if(arcOy >= rectY && arcOy <= rectY + rectH)\n    {   \n        if(arcOx < rectX)   \n            minDisX = rectX - arcOx;   \n        else if(arcOx > rectX + rectW)   \n            minDisX = arcOx - rectX - rectW;   \n        else    \n            return true;   \n        if(minDisX <= arcR)   \n            return true;   \n    }\n\n    //判断当圆心的X坐标进入矩形内时Y的位置，如果X在(rectY-arcR)到(rectY+rectH+arcR)这个范围内，则碰撞成功\n    float minDisY = 0;   \n    if(arcOx >= rectX && arcOx <= rectX + rectW)\n    {   \n        if(arcOy < rectY)   \n            minDisY = rectY - arcOy;   \n        else if(arcOy > rectY + rectH)   \n            minDisY = arcOy - rectY - rectH;   \n        else  \n            return true;   \n        if(minDisY <= arcR)   \n            return true;   \n    }\n\n    return false; \n}\n\n// 线段和线段碰撞检测\nbool IsLineCollisionLine(cocos2d::CCPoint p1, cocos2d::CCPoint p2, cocos2d::CCPoint p3, cocos2d::CCPoint p4)\n{\n    float x1 = p1.x, x2 = p2.x, x3 = p3.x, x4 = p4.x;\n    float y1 = p1.y, y2 = p2.y, y3 = p3.y, y4 = p4.y;\n\n    float d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    // If d is zero, there is no intersection\n    if (d == 0) \n        return false;\n\n    // Get the x and y\n    float pre = (x1*y2 - y1*x2), post = (x3*y4 - y3*x4);\n    float x = ( pre * (x3 - x4) - (x1 - x2) * post ) / d;\n    float y = ( pre * (y3 - y4) - (y1 - y2) * post ) / d;\n\n    // Check if the x and y coordinates are within both lines\n    if ( x < MIN(x1, x2) || x > MAX(x1, x2) ||\n        x < MIN(x3, x4) || x > MAX(x3, x4) )\n        return false;\n\n    if ( y < MIN(y1, y2) || y > MAX(y1, y2) ||\n        y < MIN(y3, y4) || y > MAX(y3, y4) ) \n        return false;\n\n    return true;\n}\n\nstatic float mult(cocos2d::CCPoint a, cocos2d::CCPoint b, cocos2d::CCPoint c)\n{\n    return (a.x-c.x)*(b.y-c.y)-(b.x-c.x)*(a.y-c.y);\n}\n\nbool IsLineCollisionLine2(cocos2d::CCPoint aa, cocos2d::CCPoint bb, cocos2d::CCPoint cc, cocos2d::CCPoint dd)\n{\n    if ( MAX(aa.x, bb.x)<MIN(cc.x, dd.x) )\n        return false;\n\n    if ( MAX(aa.y, bb.y)<MIN(cc.y, dd.y) )\n        return false;\n\n    if ( MAX(cc.x, dd.x)<MIN(aa.x, bb.x) )\n        return false;\n\n    if ( MAX(cc.y, dd.y)<MIN(aa.y, bb.y) )\n        return false;\n\n    if (mult(cc, bb, aa)*mult(bb, dd, aa)<0.0001f)\n        return false;\n\n    if (mult(aa, dd, cc)*mult(dd, bb, cc)<0.0001f)\n        return false;\n\n    return true;\n}\n\n// 线段和矩形碰撞检测\nbool IsLineCollisionRect(cocos2d::CCPoint lineStartPoint, cocos2d::CCPoint lineEndPoint, cocos2d::CCPoint rectleftBottomPoint, float width, float height)\n{\n    // 因为这个方法专门进行射线光束的碰撞检测，所以暂不进行线段在矩形内的碰撞检测\n    cocos2d::CCPoint leftLineStartPoint = rectleftBottomPoint;\n    cocos2d::CCPoint leftLineEndPoint   = cocos2d::CCPoint(leftLineStartPoint.x, leftLineStartPoint.y+height);\n\n    cocos2d::CCPoint rightLineStartPoint= cocos2d::CCPoint(leftLineStartPoint.x+width, leftLineStartPoint.y);\n    cocos2d::CCPoint rightLineEndPoint  = cocos2d::CCPoint(leftLineStartPoint.x+width, leftLineStartPoint.y+height);\n\n    cocos2d::CCPoint topLineStartPoint  = cocos2d::CCPoint(leftLineStartPoint.x, leftLineStartPoint.y+height);\n    cocos2d::CCPoint topLineEndPoint    = cocos2d::CCPoint(leftLineStartPoint.x+width, leftLineStartPoint.y+height);\n\n    cocos2d::CCPoint bottomLineStartPoint= cocos2d::CCPoint(leftLineStartPoint.x, leftLineStartPoint.y);\n    cocos2d::CCPoint bottomLineEndPoint  = cocos2d::CCPoint(leftLineStartPoint.x+width, leftLineStartPoint.y);\n    \n    cocos2d::CCPoint leftBottomLineStartPoint= rectleftBottomPoint;\n    cocos2d::CCPoint rightTopLineEndPoint    = rightLineEndPoint;\n\n    cocos2d::CCPoint leftTopLineStartPoint   = leftLineEndPoint;\n    cocos2d::CCPoint rightBottomLineEndPoint = rightLineStartPoint;\n\n\n    do \n    {\n        if (IsLineCollisionLine2(lineStartPoint, lineEndPoint, leftLineStartPoint, leftLineEndPoint))\n            break;\n\n        if (IsLineCollisionLine2(lineStartPoint, lineEndPoint, rightLineStartPoint, rightLineEndPoint))\n            break;\n\n        if (IsLineCollisionLine2(lineStartPoint, lineEndPoint, topLineStartPoint, topLineEndPoint))\n            break;\n\n        if (IsLineCollisionLine2(lineStartPoint, lineEndPoint, bottomLineStartPoint, bottomLineEndPoint))\n            break;\n\n        if (IsLineCollisionLine2(lineStartPoint, lineEndPoint, leftBottomLineStartPoint, rightTopLineEndPoint))\n            break;\n\n        if (IsLineCollisionLine2(lineStartPoint, lineEndPoint, leftTopLineStartPoint, rightBottomLineEndPoint))\n            break;\n\n        return false;\n    } \n    while (false);\n\n    return true;\n}\n\nstatic  bool  IsRectCollisionRect2(cocos2d::CCPoint rect1CenterPoint, float rect1W, float rect1H, cocos2d::CCPoint rect2CenterPoint, float rect2W, float rect2H)\n{\n    cocos2d::CCPoint leftTopPoint     = cocos2d::CCPoint(rect2CenterPoint.x-rect2W/2.0f, rect2CenterPoint.y+rect2H/2.0f);\n    cocos2d::CCPoint leftBottomPoint  = cocos2d::CCPoint(rect2CenterPoint.x-rect2W/2.0f, rect2CenterPoint.y-rect2H/2.0f);\n    cocos2d::CCPoint rightTopPoint    = cocos2d::CCPoint(rect2CenterPoint.x+rect2W/2.0f, rect2CenterPoint.y+rect2H/2.0f);\n    cocos2d::CCPoint rightBottomPoint = cocos2d::CCPoint(rect2CenterPoint.x+rect2W/2.0f, rect2CenterPoint.y-rect2H/2.0f);\n\n    if ( (leftTopPoint.x>(rect1CenterPoint.x-rect1W/2.0f)) && (leftTopPoint.x<(rect1CenterPoint.x+rect1W/2.0f)) \n        && (leftTopPoint.y>(rect1CenterPoint.y-rect1H/2.0f)) && (leftTopPoint.y<(rect1CenterPoint.y+rect1H/2.0f)))\n        return true;\n\n    if ( (leftBottomPoint.x>(rect1CenterPoint.x-rect1W/2.0f)) && (leftBottomPoint.x<(rect1CenterPoint.x+rect1W/2.0f)) \n        && (leftBottomPoint.y>(rect1CenterPoint.y-rect1H/2.0f)) && (leftBottomPoint.y<(rect1CenterPoint.y+rect1H/2.0f)))\n        return true;\n\n    if ( (rightTopPoint.x>(rect1CenterPoint.x-rect1W/2.0f)) && (rightTopPoint.x<(rect1CenterPoint.x+rect1W/2.0f)) \n        && (rightTopPoint.y>(rect1CenterPoint.y-rect1H/2.0f)) && (rightTopPoint.y<(rect1CenterPoint.y+rect1H/2.0f)))\n        return true;\n\n    if ( (rightBottomPoint.x>(rect1CenterPoint.x-rect1W/2.0f)) && (rightBottomPoint.x<(rect1CenterPoint.x+rect1W/2.0f)) \n        && (rightBottomPoint.y>(rect1CenterPoint.y-rect1H/2.0f)) && (rightBottomPoint.y<(rect1CenterPoint.y+rect1H/2.0f)))\n        return true;\n\n    return false;\n}\n\n// 矩形和矩形碰撞检测\nbool  IsRectCollisionRect(cocos2d::CCPoint rect1CenterPoint, float rect1W, float rect1H, cocos2d::CCPoint rect2CenterPoint, float rect2W, float rect2H)\n{\n    if (IsRectCollisionRect2(rect1CenterPoint, rect1W, rect1H, rect2CenterPoint, rect2W, rect2H))\n        return true;\n    \n    if (IsRectCollisionRect2(rect2CenterPoint, rect2W, rect2H, rect1CenterPoint, rect1W, rect1H))\n        return true;\n\n    return false;\n}\n\n**/"]}