{"version":3,"sources":["assets\\framework\\network\\MessageDispatch.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {MessageBase} from \"./MessageBase\"\nexport class MessageDispatch{\n\n\tprivate static _instace: MessageDispatch = null;\n\n\tpublic static getInstance(){\n\t\tif(this._instace == null){\n\t\t\tthis._instace = new MessageDispatch();\n\t\t}\n\t\treturn this._instace;\n\t}\n\n\tprivate _handler: any;\n\tprivate _allMessageBases: {[key: string]: MessageBase[]};\n\n\tconstructor(){\n\t\tthis._handler = null;\n\t\tthis._allMessageBases = {};\n\t}\n\n\tpublic register(key: string, msgPro: MessageBase){\n\t\tif(key == null) return null;\n\t\tif(msgPro == null) return null;\n\t\tlet allBases = this._allMessageBases[key];\n\t\tif(allBases == null)this._allMessageBases[key] = [];\n\t\tthis._allMessageBases[key].push(msgPro);\n\t\treturn msgPro;\n\t}\n\n\tpublic isNull(key: string){\n\t\tlet allBases = this._allMessageBases[key];\n\t\tif(allBases != null && allBases.length > 0)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tpublic registerUnique(key: string, msgPro?: MessageBase){\n\t\tif(key == null ) return null;\n\t\tlet allBases = this._allMessageBases[key];\n\t\tif(allBases != null && allBases.length > 0)\n\t\t\treturn this._allMessageBases[key][0];\n\t\telse return this.register(key, msgPro);\n\t}\n\n\tpublic getBean(key: string) {\n\t\tif( key == null ) return null;\n\t\tlet allBeans = this._allMessageBases[key];\n\t\tif(allBeans != null && allBeans.length > 0){\n\t\t\treturn <any>allBeans[0];\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic unRegister(key: string){\n\t\tlet allBases = this._allMessageBases[key];\n\t\tif(allBases == null) return;\n\t\tfor(let i = 0; i < allBases.length; i++)\n\t\t\tallBases[i].onDestory();\n\t\tthis._allMessageBases[key] = null;\n\t\tdelete this._allMessageBases[key];\n\t}\n\n\tpublic onMessage(msg: any){\n\t\tfor(let key in this._allMessageBases){\n\t\t\tif(this._allMessageBases[key]==null)continue;\n\t\t\tlet allBases = this._allMessageBases[key];\n\t\t\tfor(let i = 0; i < allBases.length; i++)\n\t\t\t\tif(allBases[i].onMessage(msg)) return true;\n\t\t}\n\t\treturn false;\n\t}\n}"]}